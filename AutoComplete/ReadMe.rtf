{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-BoldOblique;\f1\fswiss\fcharset0 Helvetica;\f2\fswiss\fcharset0 Helvetica-Oblique;
\f3\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue0;
\red255\green255\blue255;\red26\green26\blue26;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c1\c1;\cssrgb\c100000\c100000\c99985\c0;\cssrgb\c0\c0\c0;
\cssrgb\c100000\c100000\c100000;\cssrgb\c13377\c13377\c13327;\cssrgb\c0\c1\c1;\cssrgb\c100000\c100000\c99985\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\i\b\fs24 \cf0 \ul \ulc0 Overview: \

\f1\i0\b0 \ulnone This is a program that implements Autocomplete feature using 
\f2\i \ul binary Radix tree
\f1\i0 \ulnone  to return all informations that matches a keyword in an input file. For example: there are 2 restaurants Domino\'92s Pizza and Domino\'92s Pasta, if the string \'91Domino\'92 is found in the input file, all info related to these 2 restaurants will be printed out in an output file. The dataset in this project is a subset from 
\f2\i \ul https://data.melbourne.vic.gov.au/explore/dataset/cafes-and-restaurants-with-seating-capacity/information/
\f1\i0 \ulnone  .The \cf2 \cb3 dataset has been processed into a CSV file with 14 fields: \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0
\f3\b\fs24\fsmilli12150 \cf2 \cb3 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 census_year
\f1\b0 \cf2 \cb3           - The year the information was recorded for (integer)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f3\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 block_id
\f1\b0 \cf2 \cb3              - The city block ID. (integer)\
\ls1\ilvl0
\f3\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 property_id
\f1\b0 \cf2 \cb3           - The ID of the property. (integer)\
\ls1\ilvl0
\f3\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 base_property_id
\f1\b0 \cf2 \cb3      - The ID of the building the business is in. (integer)\
\ls1\ilvl0
\f3\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 building_address
\f1\b0 \cf2 \cb3      - The address of the building. (string)\
\ls1\ilvl0
\f3\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 clue_small_area
\f1\b0 \cf2 \cb3       - The CLUE area of Melbourne that the building is in. (string)\
\ls1\ilvl0
\f3\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 business_address
\f1\b0 \cf2 \cb3      - The address of the business itself. (string)\
\ls1\ilvl0
\f3\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 trading_name
\f1\b0 \cf2 \cb3          - The name of the business. (string)\
\ls1\ilvl0
\f3\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 industry_code
\f1\b0 \cf2 \cb3         - The ID for the category of the business. (integer)\
\ls1\ilvl0
\f3\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 industry_description
\f1\b0 \cf2 \cb3  - The description of the category of the business. (string)\
\ls1\ilvl0
\f3\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 seating_type
\f1\b0 \cf2 \cb3          - The type of seating the record describes. (string)\
\ls1\ilvl0
\f3\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 number_of_seats
\f1\b0 \cf2 \cb3       - The number of seats provided of this type. (integer)\
\ls1\ilvl0
\f3\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 longitude
\f1\b0 \cf2 \cb3             - The longitude (x) of the seating location. (double)\
\ls1\ilvl0
\f3\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 latitude
\f1\b0 \cf2 \cb3    -The latitude (y) of the seating location (double)\
\pard\pardeftab720\partightenfactor0

\fs24 \cf4 \cb5 \strokec6 Note: any field containing a comma will begin with a double quotation mark (\strokec4 "\strokec6 ) and end with a quotation mark (\strokec4 "\strokec6 )
\fs24\fsmilli12150 \cf2 \cb3 \strokec4 \
\

\f2\i How does it work?\

\f1\i0 In short, the program works by converting a trading_name into bits. Common bits would then become a parent node in the radix tree, and the remaining different bits would be stored in BranchA or BranchB depending on whether the sequence of bits start with 0(BranchA) or 1(BranchB). For example: if 01101111 is the first sequence of bits and 01111111 is the second one, 011 would become a parent node in the radix tree, 01111 would become BranchA and 
\fs24\fsmilli12150 \cf7 \cb8 \outl0\strokewidth0 11111 would be BranchB. Only the leaf nodes will contain data.\
\

\f2\i How to use?
\f1\i0 \
Three datasets vary in size have been included in the Data Sets folder along with all the names in those datasets( found in 100Names.txt). dataset_2.csv would include 2 infos about the first 2 trading_names in 100Names.txt and so on. Put the keyword you want to search in Input.txt. Multiple keywords can be included in the file, with each keyword on seperate new line. Then run the following in console:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf7 \kerning1\expnd0\expndtw0 {\listtext	1.	}make -B dict\
{\listtext	2.	}./dict 3 Data_Sets/
\f2\i selected dataset
\f1\i0 .csv output.out < Data_Sets/Input.txt > output.stdout.out\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\cf7 The data related to the keyword (or keywords) should be in output.out.}